{
  "table_name:travel_plans": "table name:travel_plans\n**Main Travel Plans Table Structure**\n\nThe PostgreSQL table stores detailed travel plan records, structured as follows:\n\n- **`id`**:  \n  An auto-incrementing integer, serving as the unique primary key for each travel plan.\n\n- **`org` (origin)**:  \n  Text representing the city or location where the travel begins.\n\n- **`dest` (destination)**:  \n  Text indicating the travel destination city.\n\n- **`days`**:  \n  Integer representing the total number of days planned for the trip.\n\n- **`date`**:  \n  An array or list containing one or multiple travel dates (e.g., `['2022-03-22', '2022-03-23', '2022-03-24']`).\n\n- **`query`**:  \n  Original user-generated natural language query describing the travel plan, possibly including specific details like dates, locations, or budget constraints.\n\n- **`level`**:  \n  Text categorizing the complexity or difficulty level of the trip (e.g., \"easy\").\n\n- **`reference_information`**:  \n  Raw text containing detailed travel information, such as attractions, hotels, flights, etc. Typically requires parsing for structured use.\n\n- **`reference_information_parsed` (JSONB)**:  \n  A JSONB column storing structured travel-related data extracted from `reference_information`. It consists of an array of JSON objects, each with two primary keys:\n  \n  - **`Description`**:  \n    A concise textual summary or title of the travel-related data (e.g., \"Attractions in Chicago\", \"Flights from Sarasota to Chicago\").\n    \n  - **`Content`**:  \n    Detailed textual content supporting the description. It may include listings of attractions, flight details, accommodation descriptions, transportation options, and other related travel details.\n\nThis design allows standard SQL queries on structured columns (`org`, `dest`, etc.) and powerful JSONB-based queries using PostgreSQL operators (such as `->>` or `@>`) to search within the nested JSON structures.",
  "table_name:vector_embeddings": "table name:vector_embeddings\n**Vector Store Table Structure**\n\nThe vector store table supports semantic searches by storing textual content along with its numerical vector embeddings. The structure includes:\n\n- **`id`**:  \n  Unique integer identifier for each embedding entry.\n\n- **`content`**:  \n  Original textual data corresponding to each embedding. Typically contains descriptive text extracted from travel details.\n\n- **`embedding`**:  \n  A `vector` column storing high-dimensional numerical embeddings representing the semantic meaning of the `content`. Vector dimensions depend on the embedding model used (e.g., OpenAI's `text-embedding-3-small`).",
  "similarity_search_methods": "Similarity Search Methods\n`pgvector` provides several similarity measures for vector searches:\n\n- **`<->` (Euclidean distance)**: Measures the straight-line distance between two vectors. Good for numeric embeddings where magnitude matters.\n\n- **`<#>` (Cosine distance)** *(Default Recommended)*: Measures similarity based on vector direction, independent of magnitude. Ideal for semantic text embeddings, where similarity in meaning is more important than magnitude.\n\n- **`<=>` (Inner product)**: Another similarity metric based on the dot product, often used for embeddings optimized for this measure.\n\nCosine distance (`<#>`) is recommended by default for semantic text embeddings.\n\n\n## **Performing Semantic Searches**\n\nTo retrieve semantically relevant content from the vector store:\n\n### 1. **Generate Query Embedding**\n\nUse your embedding model (e.g., OpenAI’s embedding API) to convert your query text into an embedding:\n\n```python\nquery_embedding = client.embeddings.create(\n    input=[\"your search query\"],\n    model=\"text-embedding-3-small\"\n).data[0].embedding\n```\n\n### 2. **Similarity Search Using Cosine Distance (`<#>`)**\n\nExecute the SQL query to retrieve the most semantically similar results from the database:\n\n```sql\nSELECT id, content, 1 - (embedding <#> %s::vector) AS similarity\nFROM vector_embeddings\nORDER BY embedding <#> %s::vector\nLIMIT 5;\n```\n\n- `%s::vector`: Casts the Python-generated embedding array into PostgreSQL’s vector format.\n- `embedding <#>`: Cosine distance operator, optimal for semantic textual comparisons.\n- `LIMIT 5`: Retrieves the top 5 most semantically similar records.\n\nIn Python (using a library like `psycopg2` or Supabase client):\n\n```python\ncursor.execute(sql_query, (query_embedding_str, query_embedding_str))\nresults = cursor.fetchall()\n```\n\n---\n\n## **Combined Data Retrieval (Hybrid Search)**\n\nIntegrating both structured SQL querying and semantic vector search enables a robust Retrieval Augmented Generation (RAG) system:\n\n- **Structured Queries**:  \n  Efficiently handle precise queries for exact details like specific dates, cities, or structured JSONB fields using regular SQL.\n\n- **Semantic Search**:  \n  Provide flexible, meaning-based searches that go beyond structured queries, retrieving related information semantically through the vector store.\n\n- **Hybrid Retrieval (RAG)**:  \n  Combine both structured and semantic retrieval methods to enrich model responses, allowing users to query using natural language and obtain comprehensive, relevant travel plan information.\n\n---\n\nBy organizing data this way, the system can robustly handle both explicit SQL queries and semantic search scenarios, enhancing its flexibility and effectiveness for AI-driven applications and natural language interactions."
}